# Copyright 2020, 2021, 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#+TITLE: Bazel rules for Emacs Lisp
#+LANGUAGE: en
#+OPTIONS: author:nil date:nil ^:nil
#+EXPORT_FILE_NAME: rules_elisp.texi
#+TEXINFO_FILENAME: rules_elisp.info
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: rules_elisp: (rules_elisp)
#+TEXINFO_DIR_DESC: Compilation and testing support for Emacs Lisp in Bazel

* Introduction

This repository provides a [[https://bazel.build/][Bazel]] integration for
[[info:elisp#Top][Emacs Lisp]].  It is modeled after the rules definitions for
other languages, like the [[https://docs.bazel.build/be/c-cpp.html][C++ rules]].

This is not an officially supported Google product.

* Usage

Add a snippet like the following to your Bazel ~WORKSPACE~ file:

#+BEGIN_SRC bazel-workspace
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "phst_rules_elisp",
    sha256 = "b9fa0a049a915bf46063df8c80b2610518b686b5a78a0d93d75120f67902a76d",
    strip_prefix = "rules_elisp-1dfe72da00da45427fa2e68485129b044a4a7621",
    urls = [
        "https://github.com/phst/rules_elisp/archive/1dfe72da00da45427fa2e68485129b044a4a7621.zip",  # 2022-02-16
    ],
)

load(
    "@phst_rules_elisp//elisp:repositories.bzl",
    "rules_elisp_dependencies",
    "rules_elisp_toolchains",
)

rules_elisp_dependencies()

rules_elisp_toolchains()
#+END_SRC

#+TEXINFO: @noindent
Then you can use the ~elisp_library~, ~elisp_binary~, and ~elisp_test~ rules.
See the [[*Symbols defined in =//emacs:defs.bzl=][generated documentation]] and
the examples in the ~examples~ directory for details.

* Load path management
#+CINDEX: Load path

The Emacs Lisp rules by default only add the workspace root directories to the
[[info:elisp#Library Search][load path]].  However, many Emacs Lisp libraries
assume that their immediate parent directory is present in the load path.  To
support such libraries, the ~elisp_library~ rule supports an optional
~load_path~ attribute.  You can specify additional load path directories using
this attribute.  Relative directories are relative to the Bazel package
directory; absolute directories are relative to the workspace root.  A typical
use case is to specify ~load_path = ["."]~ to add the current package to the
load path.

* Runfiles
#+CINDEX: Runfiles

This repository also includes a library to access
[[https://docs.bazel.build/skylark/rules.html#runfiles][runfiles]].  To use it,
add a build dependency on ~@phst_rules_elisp//elisp/runfiles~.  See the header
comments in ~runfiles.el~ for further usage hints.

#+FINDEX: elisp/runfiles/rlocation
#+TINDEX: elisp/runfiles/runfiles
Use the function ~elisp/runfiles/rlocation~ to map a runfile name to a
filename in the local filesystem.  For more advanced use cases, see the
class ~elisp/runfiles/runfiles~.

#+FINDEX: elisp/runfiles/file-handler
The library also provides a file name handler for runfiles,
~elisp/runfiles/file-handler~.  It uses the prefix =/bazel-runfile:=.

* Symbols defined in =//elisp:defs.bzl=
:PROPERTIES:
:ALT_TITLE: Emacs Lisp Starlark symbols
:END:

#+INCLUDE: elisp.org

* Symbols defined in =//elisp:repositories.bzl=
:PROPERTIES:
:ALT_TITLE: Repository Starlark symbols
:END:

#+INCLUDE: repositories.org

* Symbols defined in =//emacs:defs.bzl=
:PROPERTIES:
:ALT_TITLE: Emacs Starlark symbols
:END:

#+INCLUDE: emacs.org

* Indices

** Concept index
:PROPERTIES:
:INDEX: cp
:END:

** Symbol index
:PROPERTIES:
:INDEX: fn
:END:

** Type index
:PROPERTIES:
:INDEX: tp
:END:

# Local Variables:
# org-adapt-indentation: nil
# org-edit-src-content-indentation: 0
# End:
